from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from aiogram import F, Router, html
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from app.parser import lst

import app.keyboards as kb

router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ –≤–∞–ª—é—Ç—ã
class BY_USD(StatesGroup):
    wait_for_amount = State()

class BY_RUB(StatesGroup):
    wait_for_amount = State()

class BY_EUR(StatesGroup):
    wait_for_amount = State()

#–°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ –≤–∞–ª—é—Ç—ã
class USD_BY(StatesGroup):
    wait_for_amount = State()

class RUB_BY(StatesGroup):
    wait_for_amount = State()

class EUR_BY(StatesGroup):
    wait_for_amount = State()


#–°—Ç–∞—Ä—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –≤–∞–ª—é—Ç—ã

@router.message(F.text == '–ë–µ–ª–∞—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å --> –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä')
async def start_conversion(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö:", reply_markup=kb.back)
    await state.set_state(BY_USD.wait_for_amount)

@router.message(F.text == '–ë–µ–ª–∞—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å --> –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å')
async def start_conversion(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö:", reply_markup=kb.back)
    await state.set_state(BY_RUB.wait_for_amount)

@router.message(F.text == '–ë–µ–ª–∞—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å --> –ï–≤—Ä–æ')
async def start_conversion(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö:", reply_markup=kb.back)
    await state.set_state(BY_EUR.wait_for_amount)

#–°—Ç–∞—Ä—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ –≤–∞–ª—é—Ç—ã

@router.message(F.text == '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä --> –ë–µ–ª–∞—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å')
async def start_conversion(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö –¥–æ–ª–ª–∞—Ä–∞—Ö:", reply_markup=kb.back)
    await state.set_state(USD_BY.wait_for_amount)

@router.message(F.text == '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å --> –ë–µ–ª–∞—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å')
async def start_conversion(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –†–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö:", reply_markup=kb.back)
    await state.set_state(RUB_BY.wait_for_amount)

@router.message(F.text == '–ï–≤—Ä–æ --> –ë–µ–ª–∞—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å')
async def start_conversion(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –ï–≤—Ä–æ:", reply_markup=kb.back)
    await state.set_state(EUR_BY.wait_for_amount)


# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ (–ü–æ–∫—É–ø–∫–∞ –≤–∞–ª—é—Ç—ã)

@router.message(BY_USD.wait_for_amount, lambda message: message.text.replace('.', '', 1).isdigit())
async def convert_currency_BY_USD(message: Message, state: FSMContext):
    amount_byn = float(message.text)
    amount_usd = amount_byn / float(lst[1])
    await message.answer(f"{amount_byn} BYN = {amount_usd:.2f} USD")

@router.message(BY_RUB.wait_for_amount, lambda message: message.text.replace('.', '', 1).isdigit())
async def comvert_currency_BY_RUB(message: Message, state: FSMContext):
    amount_byn = float(message.text)
    amount_rub = amount_byn * 10 * float(lst[5])
    await message.answer(f"{amount_byn} BYN = {amount_rub:.2f} RUB")

@router.message(BY_EUR.wait_for_amount, lambda message: message.text.replace('.', '', 1).isdigit())
async def comvert_currency_BY_EUR(message: Message, state: FSMContext):
    amount_byn = float(message.text)
    amount_eur = amount_byn / float(lst[3])
    await message.answer(f"{amount_byn} BYN = {amount_eur:.2f} EUR")


# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ (–ü—Ä–æ–¥–∞–∂–∞ –≤–∞–ª—é—Ç—ã)

@router.message(USD_BY.wait_for_amount, lambda message: message.text.replace('.', '', 1).isdigit())
async def convert_currency_USD_BY(message: Message, state: FSMContext):
    amount_usd = float(message.text)
    amount_byn = amount_usd * float(lst[0])
    await message.answer(f"{amount_usd} USD = {amount_byn:.2f} BYN")

@router.message(RUB_BY.wait_for_amount, lambda message: message.text.replace('.', '', 1).isdigit())
async def comvert_currency_RUB_BY(message: Message, state: FSMContext):
    amount_rub = float(message.text)
    amount_byn = amount_rub / 10 / float(lst[4])
    await message.answer(f"{amount_rub} RUB = {amount_byn:.2f} BYN")

@router.message(EUR_BY.wait_for_amount, lambda message: message.text.replace('.', '', 1).isdigit())
async def comvert_currency_BY_EUR(message: Message, state: FSMContext):
    amount_eur = float(message.text)
    amount_byn = amount_eur * float(lst[2])
    await message.answer(f"{amount_eur} EUR = {amount_byn:.2f} BYN")


# –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(F.text == '–ù–∞–∑–∞–¥')
async def back(message: Message, state: FSMContext) -> None:
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.", reply_markup=kb.main)
    await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {html.bold('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç')}.üí∏üí∏üí∏",
        reply_markup=kb.main)


# –•–µ–Ω–¥–ª–µ—Ä—ã –ø–µ—Ä–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

@router.message(F.text == '–ü–æ–∫—É–ø–∫–∞ –≤–∞–ª—é—Ç—ã')
async def pay_menu(message: Message) -> None:
    await message.answer('–ü–æ–∫—É–ø–∫–∞ –≤–∞–ª—é—Ç—ã', reply_markup=kb.pay_menu)


@router.message(F.text == '–ü—Ä–æ–¥–∞–∂–∞ –≤–∞–ª—é—Ç—ã')
async def pay_menu(message: Message) -> None:
    await message.answer('–ü—Ä–æ–¥–∞–∂–∞ –≤–∞–ª—é—Ç—ã', reply_markup=kb.sell_menu)


@router.message(F.text == '–¢–∞—Ä–∏—Ñ—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É|–ø—Ä–æ–¥–∞–∂—É –≤–∞–ª—é—Ç—ã')
async def dashboard(message: Message) -> None:
    await message.answer(
        f"–í–∞–ª—é—Ç–∞ ----- –°–¥–∞—Ç—å ----- –ö—É–ø–∏—Ç—å\n{html.bold('USD')}        ----- {lst[0]} ------ {lst[1]}\n{html.bold('EUR')}        ----- {lst[2]} ------ {lst[3]}\n{html.bold('RUB')}        ----- {lst[4]} ------ {lst[5]}\n")


# –•–µ–Ω–¥–ª–µ—Ä—ã –ø–æ–∫—É–ø–∫–∏ –≤–∞–ª—é—Ç—ã
@router.message(F.text == '–ë–µ–ª–∞—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å --> –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä')
async def dashboard(message: Message) -> None:
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:', reply_markup=kb.back)


@router.message(F.text == '–ë–µ–ª–∞—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å --> –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å')
async def dashboard(message: Message) -> None:
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:', reply_markup=kb.back)


@router.message(F.text == '–ë–µ–ª–∞—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å --> –ï–≤—Ä–æ')
async def dashboard(message: Message) -> None:
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:', reply_markup=kb.back)


# –•–µ–Ω–¥–ª–µ—Ä—ã –ø—Ä–æ–¥–∞–∂–∏ –≤–∞–ª—é—Ç—ã
@router.message(F.text == '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä --> –ë–µ–ª–∞—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å')
async def dashboard(message: Message) -> None:
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:', reply_markup=kb.back)


@router.message(F.text == '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å --> –ë–µ–ª–∞—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å')
async def dashboard(message: Message) -> None:
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:', reply_markup=kb.back)


@router.message(F.text == '–ï–≤—Ä–æ --> –ë–µ–ª–∞—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å')
async def dashboard(message: Message) -> None:
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:', reply_markup=kb.back)


@router.message(F.text == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
async def pay_menu(message: Message) -> None:
    await message.answer('–ù–∞–∑–∞–¥–≤ –º–µ–Ω—é', reply_markup=kb.main)

